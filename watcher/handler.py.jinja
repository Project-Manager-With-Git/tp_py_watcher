import os
import time
from hashlib import md5
from typing import Dict, Any, Union
from watchdog.observers import Observer
# from watchdog.observers.polling import PollingObserver as Observer # 如果在docker中部署可以用PollingObserver
from watchdog.events import FileSystemEventHandler, DirModifiedEvent, FileModifiedEvent
from pyloggerhelper import log


class EventHanddler(FileSystemEventHandler):
    """事件处理回调.

    需要实现的部分
    """
    latest: Dict[str, bytes]

    def __init__(self, ) -> None:
        self.latest = {}

    def on_modified(self, event: Union[DirModifiedEvent, FileModifiedEvent]) -> None:
        log.info("handdler get event", get_event=event)
        if isinstance(event, FileModifiedEvent):
            with open(event.src_path) as f:
                content = f.read()
            if content:
                m = md5()
                m.update(content.encode("utf-8"))
                nowmd5 = m.digest()
                lastmd5 = self.latest.get(event.src_path)
                if lastmd5:
                    if lastmd5 != nowmd5:
                        self.latest[event.src_path] = nowmd5
                        log.info("get file modified", p=event.src_path, content=content)
                else:
                    self.latest[event.src_path] = nowmd5
                    log.info("get file modified", p=event.src_path, content=content)

