from typing import Iterator, AsyncIterator
from pyloggerhelper import log

from etcdproxy import EtcdProxy

etcd = EtcdProxy()


def handdler(events_iterator: Iterator) -> None:
    from etcd3.events import PutEvent, DeleteEvent
    for event in events_iterator:
        try:
            if isinstance(event, PutEvent):
                key = event.key.decode("utf-8")
                value = event._event.kv.value.decode("utf-8")
                log.info("get put event", key=key, value=value)

            elif isinstance(event, DeleteEvent):
                key = event.key.decode("utf-8")
                log.info("get delete event", key=key)
        except Exception as e:
            log.error("event watch error", e=e)


async def aiohanddler(events_iterator: AsyncIterator) -> None:
    from aetcd3.events import PutEvent, DeleteEvent
    async for event in events_iterator:
        try:
            if isinstance(event, PutEvent):
                key = event.key.decode("utf-8")
                value = event._event.kv.value.decode("utf-8")
                log.info("get put event", key=key, value=value)

            elif isinstance(event, DeleteEvent):
                key = event.key.decode("utf-8")
                log.info("get delete event", key=key)
        except Exception as e:
            log.error("event watch error", e=e)
