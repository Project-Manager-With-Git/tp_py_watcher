from etcdproxy import EtcdProxy

etcd = EtcdProxy()

def run_handdler(watch_etcd_prefix:bool, watch_etcd_key:str) -> None:
    if watch_etcd_prefix:
        events_iterator, cancel = etcd.watch_prefix(watch_etcd_key)
    else:
        events_iterator, cancel = etcd.watch(watch_etcd_key)
    try:
        handdler(events_iterator)
    except (KeyboardInterrupt, SystemExit):
        log.info('kafka watcher stoped')
    except Exception as e:
        log.error("kafka watcher get error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
    finally:
        cancel()
        etcd.close()

async def run_aiohanddler(watch_etcd_prefix:bool, watch_etcd_key:str) -> None:
    if watch_etcd_prefix:
        events_iterator, cancel = await etcd.watch_prefix(watch_etcd_key)
    else:
        events_iterator, cancel = await etcd.watch(watch_etcd_key)
    try:
        await aiohanddler(events_iterator)
    except (KeyboardInterrupt, SystemExit):
        log.info('kafka watcher stoped')
    except Exception as e:
        log.error("kafka watcher get error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
    finally:
        await cancel()
        await etcd.close()

def watch(watch_etcd_url:str):
    watch_etcd_url = self.config["watch_etcd_url"]
    etcd.initialize_from_url(url=watch_etcd_url)
    if etcd.aio:
        import asyncio
        asyncio.run(self.run_aiohanddler(watch_etcd_prefix, watch_etcd_key))
    else:
        self.run_handdler(watch_etcd_prefix, watch_etcd_key)