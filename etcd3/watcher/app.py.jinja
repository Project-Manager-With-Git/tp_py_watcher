from schema_entry import EntryPoint
from pyloggerhelper import log

from .watcher import etcd, handdler, aiohanddler

class Application(EntryPoint):
    _name = "{{ app_name }}_watcher"
    schema = {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "required": [
            "app_version",
            "app_name",
            "log_level",
            "watch_etcd_url",
            "watch_etcd_key",
            "watch_etcd_prefix"
        ],
        "properties": {
            "app_version": {
                "type": "string",
                "title": "v",
                "description": "应用版本",
                "default": "0.0.0"
            },
            "app_name": {
                "type": "string",
                "title": "n",
                "description": "应用名",
                "default": "{{ app_name }}_watcher"
            },
            "log_level": {
                "type": "string",
                "title": "l",
                "description": "log等级",
                "enum": ["DEBUG", "INFO", "WARN", "ERROR"],
                "default": "INFO"
            },
            "watch_etcd_url": {
                "type": "string",
                "title": "u",
                "description": "监听的etcd实例地址",

            },
            "watch_etcd_key": {
                "type": "string",
                "title": "g",
                "description": "监听的etcd的键"
            },
            "watch_etcd_prefix": {
                "type": "boolean",
                "title": "p",
                "description": "监听的键是一个前缀而不是以一个完整的键",
                "default": False
            }
        }
    }
    def run_handdler(self, watch_etcd_prefix:bool, watch_etcd_key:str) -> None:
        if watch_etcd_prefix:
            events_iterator, cancel = etcd.watch_prefix(watch_etcd_key)
        else:
            events_iterator, cancel = etcd.watch(watch_etcd_key)
        try:
            handdler(events_iterator)
        except (KeyboardInterrupt, SystemExit):
            log.info('kafka watcher stoped')
        except Exception as e:
            log.error("kafka watcher get error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
        finally:
            cancel()
            etcd.close()

    async def run_aiohanddler(self, watch_etcd_prefix:bool, watch_etcd_key:str) -> None:
        if watch_etcd_prefix:
            events_iterator, cancel = await etcd.watch_prefix(watch_etcd_key)
        else:
            events_iterator, cancel = await etcd.watch(watch_etcd_key)
        try:
            await aiohanddler(events_iterator)
        except (KeyboardInterrupt, SystemExit):
            log.info('kafka watcher stoped')
        except Exception as e:
            log.error("kafka watcher get error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
        finally:
            await cancel()
            await etcd.close()

    def do_main(self) -> None:
        log.initialize_for_app(
            app_name=self.config.get("app_name"),
            log_level=self.config.get("log_level")
        )
        log.info("获取任务配置", config=self.config)
        watch_etcd_url = self.config["watch_etcd_url"]
        watch_etcd_key = self.config["watch_etcd_key"]
        watch_etcd_prefix = self.config["watch_etcd_prefix"]
        etcd.initialize_from_url(url=watch_etcd_url)
        if etcd.aio:
            import asyncio
            asyncio.run(self.run_aiohanddler(watch_etcd_prefix, watch_etcd_key))
        else:
            self.run_handdler(watch_etcd_prefix, watch_etcd_key)
