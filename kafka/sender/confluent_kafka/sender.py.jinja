from typing import Dict, Any, Union, List, Tuple, Optional, Callable
from pyloggerhelper import log
from pyproxypattern import Proxy
from confluent_kafka import Producer


class KafkaSender(Proxy):
    __slots__ = ('_delivered_records', 'instance', '_callbacks', '_instance_check')
    _delivered_records: int

    @classmethod
    def create(clz, **configs: Any) -> "KafkaSender":
        """初始化创建一个监听对象.
        参数参考<https://kafka-python.readthedocs.io/en/master/apidoc/KafkaProducer.html>
        """
        c = Producer(configs)
        p = clz()
        p.initialize(c)
        return p

    def __init__(self) -> None:
        super().__init__()
        self._delivered_records = 0
        self._instance_check = lambda instance: isinstance(instance, Producer)

    @property
    def delivered_records(self) -> int:
        return self._delivered_records

    def acked(self, err: Any, msg: Any) -> None:
        """Called once for each message produced to indicate delivery result.

        Triggered by poll() or flush()
        """
        if err is not None:
            print(f'Message delivery failed: {err}')
        else:
            self._delivered_records += 1
            print(f'Message delivered to {msg.topic()} [{msg.partition()}]')

    def send(self, topic: str, value: Union[str, bytes], key: Union[str, bytes, None] = None, partition: int = -1,
             timestamp: int = 0, headers: Union[Dict[str, bytes], List[Tuple[str, bytes]], None] = None,
             on_delivery: Optional[Callable] = None) -> None:
        # Asynchronously produce a message, the delivery report callback
        # will be triggered from poll() above, or flush() below, when the message has
        # been successfully delivered or failed permanently.
        cb = self.acked
        if on_delivery:
            cb = on_delivery
        self.instance.produce(topic=topic, value=value, key=key, partition=partition, timestamp=timestamp, headers=headers, on_delivery=cb)
        # Trigger any available delivery report callbacks from previous produce() calls
        self.instance.poll(0)
